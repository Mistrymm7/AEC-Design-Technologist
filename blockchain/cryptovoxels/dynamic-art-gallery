```javascript 
  // Final Version 
  // from https://untrusted.cryptovoxels.com/grid/spaces/5f1256c6-3c66-4eb1-9bae-c55312bc7e16/scripts.js

// Remove Images
feature.on('click', e => { 
  let imageslist = parcel.getFeaturesByType('image'); 
  for (let j = 0; j < imageslist.length; j++) { imageslist[j].remove(); }
})
  
feature.on('click', e => {
  console.log("Clicked");
  const options = { method: 'GET' };
  console.log("Moralis API")
  let result;
  let noofvalidurl = 0;
  let url = "https://deep-index.moralis.io/api/v2/0x65334efb0c2e228bdc21243b6d6598b8dcb3f410/nft?chain=eth&format=decimal"
  fetch(url, { headers: { Accept: "application/json", "X-Api-Key": "YOURAPIKEYHERE" } })
  .then(response => response.json()).then(response => {
	console.log(response.result)
	let resultmm = response.result
	let nftdata = resultmm.map(o => ({ token: o.token_id , image: JSON.parse(o.metadata) , tokenadd: o.token_address } ))
	console.log("mapped data (Id and image Metadata") );
	console.log(nftdata)
	let imgurl = [];
	for (let i = 0; i < nftdata.length; i++) {
	  imgurl[i] = nftdata[i].image;
	  //let formatcheck = imgurl[i].image;
	  if (imgurl[i] === null) { continue; };
	  if (imgurl[i].image === undefined) { console.log("Token Id no." + i + " is undefinded"); } 
	  else {
		noofvalidurl = noofvalidurl + 1;   
		let imgFrame = parcel.createFeature('image'); 
		imgFrame.set({ 'id': 'image' + i.toString(), 'url': imgurl[i].image , scale: [2, 2, 2], position: [2.5 * (i % 5) - 5, 2.5 * (Math.floor(i / 5)) + 2.5, 1.5] })
	  } 
	}
  } )
} )
================
// Button 1 (Generate)

feature.on('click',e=>{

let featureslist = parcel.getFeatures();
  
for (let i = 0; i < 5; i++) {
  let imgFrame = parcel.createFeature('image') ;      
    imgFrame.id = 'mmimage';
  
  imgFrame.set({
          'url':"https://i.imgur.com/oKZ95XY.jpeg", 
          scale:[2,2,2],
          position:[1.5,5*i,1.5]
          })  
    } 
  })
  
// Button 2 (Delete)

feature.on('click', e=>{
  
  let features = parcel.getFeatures();

  console.log(features)
  
  let mm2 = features[5];
  console.log(mm2);
  //mm2.remove();
  
let imageslist = parcel.getFeaturesByType('image');
console.log(imageslist)
console.log(imageslist.length);

  for (let j=0; j<imageslist.length;j++ ){
    imageslist[j].remove();
  }

  
  // Not Working
  // parcel.removeFeature('mmimage')
  
  //parcel.removeFeature(f)
  
  
  ========
  // Parcel Features level (Count before generation, Generate, Delete from old to new using parcel.getFeatures();
  // Object Features level (Keep tracking of existing images and new images
  // ID Features level
  
   let abc = parcel.getFeatureById('global-state');
  
  let noofimginstr = abc.get('text')
  console.log("State reading issue" +  abc )
  let noofimginnum = parseInt(noofimginstr, 10);
      
   console.log(abc.get('text'))
  console.log("No of iteration to del" +noofimginnum )
  
  for (let j=0; j<noofimginnum;j++ ){
    
    //concate
    let idtodel = 'image' + j.toString()   
    console.log('id to del ' + idtodel)     
    let imgg = parcel. getFeatureById('idtodel');  
    console.log("Feature " + imgg)  
    imgg.remove();
  }
  
  ==============

  ```
